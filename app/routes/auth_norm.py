from flask import Blueprint, render_template, redirect, url_for, request, flash, session, jsonify, current_app\nfrom flask_mail import Message\nfrom app import db, mail\nfrom app.models.usuario import Usuario\nfrom app.models.cita import Cita\nfrom app.models.estilo import Estilo\nfrom app.models.servicio import Servicio\nfrom datetime import datetime, timedelta\nimport random\nimport string\n\n\nbp = Blueprint('auth', __name__)\n\n# ========== LOGIN ==========\n@bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        correo = request.form['correo']\n        contrasena = request.form['contrasena']\n\n        usuario = Usuario.query.filter_by(correo=correo).first()\n        if usuario and usuario.check_password(contrasena):\n            # Guardar datos en sesión\n            session['usuario_id'] = usuario.id\n            session['nombre'] = usuario.nombre\n            session['apellido'] = usuario.apellido\n            session['correo'] = usuario.correo \n            session['telefono'] = usuario.telefono\n            session['rol'] = usuario.rol\n            flash('Inicio de sesión exitoso', 'success')\n            return redirect(url_for('auth.index'))\n        else:\n            flash('Credenciales inválidas', 'error')\n\n    return render_template('login.html')\n\n@bp.route('/')\ndef index():\n    usuario_autenticado = 'usuario_id' in session\n    servicios = Servicio.query.all()\n    return render_template('main.html', usuario_autenticado=usuario_autenticado, servicios=servicios)\n\n@bp.route('/dashboard')\ndef dashboard():\n    if 'usuario_id' not in session:\n        return redirect(url_for('auth.login'))\n    if session.get('rol') == 'admin':\n        servicios = Servicio.query.all()\n        return render_template('usuario/admin/admin_dashboard.html', servicios=servicios)\n    return render_template('usuario/cliente/cliente_dashboard.html')\n\n# ========== LOGOUT ==========\n@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('auth.index'))\n\n@bp.route('/citas')\ndef citas():\n    if 'usuario_id' not in session:\n        return redirect(url_for('auth.login'))\n\n    from app.models.cita import Cita\n    rol = session.get('rol')\n    usuario_id = session.get('usuario_id')\n\n    if rol == 'admin':\n        citas = Cita.query.filter_by(barbero_id=usuario_id).all()\n        return render_template('usuario/admin/admin_dashboard.html', citas=citas)\n    else:\n        citas = Cita.query.filter_by(usuario_id=usuario_id).all()\n        return render_template('usuario/cliente/cliente_dashboard.html', citas=citas)\n\n# Añadir esta función en app/routes/auth.py, junto a las demás rutas\n@bp.route('/calendario')\ndef calendario():\n    if 'usuario_id' not in session:\n        return redirect(url_for('auth.login'))\n    \n    rol = session.get('rol')\n    if rol == 'admin':\n        return render_template('usuario/admin/admin_dashboard.html')\n    return render_template('usuario/cliente/cliente_dashboard.html')\n\n@bp.route('/servicios')\ndef servicios():\n    if session.get('rol') != 'admin':\n        flash('Acceso no autorizado.', 'error')\n        return redirect(url_for('auth.index'))\n    servicios = Servicio.query.all()\n    return render_template('usuario/admin/admin_dashboard.html', servicios=servicios)\n\n@bp.route('/admin/estilos')\ndef estilos():\n    if session.get('rol') != 'admin':\n        flash('Acceso no autorizado.', 'error')\n        return redirect(url_for('auth.index'))\n    estilos = Estilo.query.all()\n    return render_template('usuario/admin/admin_dashboard.html', estilos=estilos)\n\n@bp.route('/clientes')\ndef clientes():\n    if session.get('rol') != 'admin':\n        flash('Acceso no autorizado.', 'error')\n        return redirect(url_for('auth.index'))\n    return render_template('usuario/admin/admin_dashboard.html')\n\n@bp.route('/historial')
def historial():
    if 'usuario_id' not in session:
        return redirect(url_for('auth.login'))
    rol = session.get('rol')
    if rol == 'admin':
        return render_template('usuario/admin/admin_dashboard.html')
    return render_template('usuario/cliente/cliente_dashboard.html')
\n@bp.route('/ingresos')
def ingresos():
    if 'usuario_id' not in session:
        return redirect(url_for('auth.login'))
    rol = session.get('rol')
    if rol == 'admin':
        return render_template('usuario/admin/admin_dashboard.html')
    return render_template('usuario/cliente/cliente_dashboard.html')

@bp.route('/pagos')
def pagos():
    if 'usuario_id' not in session:
        return redirect(url_for('auth.login'))
    rol = session.get('rol')
    if rol == 'admin':
        return render_template('usuario/admin/admin_dashboard.html')
    # Por ahora no hay vista de pagos para cliente
    return render_template('usuario/cliente/cliente_dashboard.html')
\n@bp.route('/inventario')\ndef inventario():\n    return render_template('usuario/admin/admin_dashboard.html')\n\n@bp.route('/configuracion')\ndef configuracion():\n    if 'usuario_id' not in session:\n        return redirect(url_for('auth.login'))\n    rol = session.get('rol')\n    if rol == 'admin':\n        return render_template('usuario/admin/admin_dashboard.html')\n    return render_template('usuario/cliente/cliente_dashboard.html')\n\n@bp.route('/actualizar_estado_cita/<int:cita_id>', methods=['POST'])\ndef actualizar_estado_cita(cita_id):\n    try:\n        cita = Cita.query.get_or_404(cita_id)\n        if cita.barbero_id != session.get('usuario_id'):\n            return jsonify({'error': 'No tienes permiso para modificar esta cita'}), 403\n        estado = request.form.get('estado')\n        if estado not in ['pendiente', 'confirmado', 'cancelado', 'completado']:\n            return jsonify({'error': 'Estado inválido'}), 400\n        cita.estado = estado\n        db.session.commit()\n        return jsonify({'success': True, 'estado': estado}), 200\n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n    \n# ========== RESTABLECER CONTRASEÑA ==========\n@bp.route('/reset-password')\ndef reset_password():\n    return render_template('usuario/cambiar_contraseña.html')\n\n@bp.route('/api/reset-password/solicitar', methods=['POST'])\ndef solicitar_reset():\n    data = request.get_json()\n    email = data.get('email')\n    \n    # Verificar si el correo existe\n    usuario = Usuario.query.filter_by(correo=email).first()\n    if not usuario:\n        # Por seguridad, no revelar si el correo existe o no\n        return jsonify({'message': 'Si el correo está registrado, recibirás un código de verificación.'}), 200\n    \n    # Generar código de verificación\n    codigo = ''.join(random.choices(string.digits, k=6))\n    expiracion = datetime.now() + timedelta(minutes=15)  # El código expira en 15 minutos\n    \n    # Almacenar el código en la base de datos\n    usuario.reset_codigo = codigo\n    usuario.reset_expiracion = expiracion\n    db.session.commit()\n    \n    try:\n        # Crear mensaje de correo\n        msg = Message(\n            subject='Código de verificación - RG4LBarber',\n            recipients=[email]\n        )\n        \n        # Contenido del mensaje\n        msg.body = f"""\n        Hola {usuario.nombre},\n        \n        Has solicitado restablecer tu contraseña. \n        Tu código de verificación es: {codigo}\n        \n        Este código expirará en 15 minutos.\n        \n        Si no solicitaste restablecer tu contraseña, por favor ignora este mensaje.\n        \n        Saludos,\n        El equipo de RG4LBarber\n        """\n        \n        # Versión HTML del mensaje\n        msg.html = f"""\n        <!DOCTYPE html>\n        <html lang="es">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@400;500;600;700&family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">\n            <title>Restablecimiento de Contraseña</title>\n        </head>\n        <body style="font-family: 'Poppins', sans-serif; margin: 0; padding: 0; background-color: #f4f4f4;">\n            <div style="max-width: 600px; margin: 0 auto; padding: 20px; background-color: #fff; border-radius: 10px; border: 1px solid #eaeaea; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">\n                <!-- Logo en la parte superior -->\n                <div style="text-align: center; margin-bottom: 20px;">\n                    <img src="https://res.cloudinary.com/dsi2yfaew/image/upload/v1756158124/logo2_hy3sol.png" alt="RG4LBarber Logo" style="max-width: 75px; height: auto;">\n                </div>\n                \n                <h2 style="font-family: 'Oswald', sans-serif; color: #E5304A; text-align: center; font-size: 24px; font-weight: 600; margin-bottom: 20px;">RESTABLECIMIENTO DE CONTRASEÑA</h2>\n                \n                <p style="margin-bottom: 15px; color: #333; line-height: 1.6;font-size: 14px;">Hola <strong>{usuario.nombre}</strong>,</p>\n                \n                <p style="margin-bottom: 15px; color: #333; line-height: 1.6; font-size: 14px;">Has solicitado restablecer tu contraseña.</p>\n                \n                <div style="background-color: #f9f9f9; border-left: 4px solid #E5304A; padding: 15px; margin: 20px 0; text-align: center;">\n                    <p style="font-family: 'Oswald', sans-serif; margin: 0; font-size: 14px; color: #666;">TU CÓDIGO DE VERIFICACIÓN ES:</p>\n                    <p style="font-family: 'Oswald', sans-serif; font-size: 32px; font-weight: 700; color: #E5304A; letter-spacing: 5px; margin: 10px 0;">{codigo}</p>\n                </div>\n                \n                <p style="font-size: 14px; color: #666; margin-bottom: 15px;">Este código expirará en <strong>15 minutos</strong>.</p>\n                \n                <hr style="border: none; border-top: 1px solid #eee; margin: 25px 0;">\n                \n                <p style="font-size: 13px; color: #777; margin-bottom: 5px;">Si no solicitaste restablecer tu contraseña, por favor ignora este mensaje.</p>\n                \n                <div style="text-align: center; margin-top: 30px;">\n                    <p style="font-family: 'Oswald', sans-serif; font-size: 16px; font-weight: 600; color: #333; margin-bottom: 5px;">RG4LBARBER</p>\n                    <p style="font-size: 12px; color: #999;">Estilo y precisión en cada corte</p>\n                </div>\n            </div>\n        </body>\n        </html>\n        """\n        \n        # Información de depuración antes del envío\n        print(f"Intentando enviar correo a: {email}")\n        print(f"Configuración de correo actual:")\n        print(f"  - MAIL_SERVER: {current_app.config.get('MAIL_SERVER')}")\n        print(f"  - MAIL_PORT: {current_app.config.get('MAIL_PORT')}")\n        print(f"  - MAIL_USE_TLS: {current_app.config.get('MAIL_USE_TLS')}")\n        print(f"  - MAIL_USERNAME: {current_app.config.get('MAIL_USERNAME')}")\n        \n        # Enviar el correo\n        mail.send(msg)\n        \n        print(f"✅ Correo enviado exitosamente a {email} con código {codigo}")\n        \n        return jsonify({'message': 'Código de verificación enviado'}), 200\n    \n    except Exception as e:\n        # Registro detallado del error\n        import traceback\n        error_traceback = traceback.format_exc()\n        print(f"❌ ERROR al enviar correo a {email}:")\n        print(f"Tipo de error: {type(e).__name__}")\n        print(f"Descripción del error: {str(e)}")\n        print(f"Traceback completo:")\n        print(error_traceback)\n        \n        # Si es un error de conexión, proporciona más información\n        if "socket.gaierror" in error_traceback or "Connection refused" in error_traceback:\n            return jsonify({'error': 'Error de conexión con el servidor de correo. Verifica la configuración.'}), 500\n        elif "Authentication" in str(e):\n            return jsonify({'error': 'Error de autenticación con el servidor de correo. Verifica usuario y contraseña.'}), 500\n        elif "Sender address rejected" in str(e):\n            return jsonify({'error': 'Dirección de remitente rechazada. Verifica tu dirección de correo.'}), 500\n        else:\n            # Error genérico para el usuario pero detallado en los logs\n            return jsonify({'error': f'No se pudo enviar el correo: {type(e).__name__}'}), 500\n\n# API para verificar el código\n@bp.route('/api/reset-password/verificar', methods=['POST'])\ndef verificar_codigo():\n    data = request.get_json()\n    email = data.get('email')\n    codigo = data.get('codigo')\n    \n    usuario = Usuario.query.filter_by(correo=email).first()\n    if not usuario or not usuario.reset_codigo or usuario.reset_codigo != codigo:\n        return jsonify({'error': 'Código inválido'}), 400\n    \n    # Verificar si el código ha expirado\n    if datetime.now() > usuario.reset_expiracion:\n        return jsonify({'error': 'Código expirado. Solicita uno nuevo.'}), 400\n    \n    # Generar token para cambio de contraseña\n    token = ''.join(random.choices(string.ascii_letters + string.digits, k=32))\n    usuario.reset_token = token\n    usuario.reset_token_expiracion = datetime.now() + timedelta(minutes=15)\n    db.session.commit()\n    \n    return jsonify({'token': token}), 200\n\n# API para reenviar código\n@bp.route('/api/reset-password/reenviar', methods=['POST'])\ndef reenviar_codigo():\n    data = request.get_json()\n    email = data.get('email')\n    \n    usuario = Usuario.query.filter_by(correo=email).first()\n    if not usuario:\n        return jsonify({'message': 'Si el correo está registrado, recibirás un código de verificación.'}), 200\n    \n    # Generar nuevo código\n    codigo = ''.join(random.choices(string.digits, k=6))\n    expiracion = datetime.now() + timedelta(minutes=15)\n    \n    usuario.reset_codigo = codigo\n    usuario.reset_expiracion = expiracion\n    db.session.commit()\n    \n    try:\n        # Crear mensaje de correo\n        msg = Message(\n            subject='Código de verificación (Reenviado) - RG4LBarber',\n            recipients=[email]\n        )\n        \n        # Contenido del mensaje en texto plano\n        msg.body = f"""\n        Hola {usuario.nombre},\n        \n        Has solicitado reenviar tu código de verificación para restablecer tu contraseña.\n        Tu nuevo código es: {codigo}\n        \n        Este código expirará en 15 minutos.\n        \n        Si no solicitaste restablecer tu contraseña, por favor ignora este mensaje.\n        \n        Saludos,\n        El equipo de RG4LBarber\n        """\n        \n        # Contenido del mensaje\n        msg.html = f"""\n        <!DOCTYPE html>\n        <html lang="es">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@400;500;600;700&family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">\n            <title>Reenvío de Código</title>\n        </head>\n        <body style="font-family: 'Poppins', sans-serif; margin: 0; padding: 0; background-color: #f4f4f4;">\n            <div style="max-width: 600px; margin: 0 auto; padding: 20px; background-color: #fff; border-radius: 10px; border: 1px solid #eaeaea; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">\n                <!-- Logo en la parte superior -->\n                <div style="text-align: center; margin-bottom: 20px;">\n                    <img src="https://res.cloudinary.com/dsi2yfaew/image/upload/v1756158124/logo2_hy3sol.png" alt="RG4LBarber Logo" style="max-width: 75px; height: auto;">\n                </div>\n                \n                <h2 style="font-family: 'Oswald', sans-serif; color: #E5304A; text-align: center; font-size: 24px; font-weight: 600; margin-bottom: 20px;">CÓDIGO REENVIADO</h2>\n                \n                <p style="margin-bottom: 15px; color: #333; line-height: 1.6;">Hola <strong>{usuario.nombre}</strong>,</p>\n                \n                <p style="margin-bottom: 15px; color: #333; line-height: 1.6;">Has solicitado reenviar tu código de verificación para restablecer tu contraseña.</p>\n                \n                <div style="background-color: #f9f9f9; border-left: 4px solid #E5304A; padding: 15px; margin: 20px 0; text-align: center;">\n                    <p style="font-family: 'Oswald', sans-serif; margin: 0; font-size: 14px; color: #666;">TU NUEVO CÓDIGO DE VERIFICACIÓN ES:</p>\n                    <p style="font-family: 'Oswald', sans-serif; font-size: 32px; font-weight: 700; color: #E5304A; letter-spacing: 5px; margin: 10px 0;">{codigo}</p>\n                </div>\n                \n                <p style="font-size: 14px; color: #666; margin-bottom: 15px;">Este código expirará en <strong>15 minutos</strong>.</p>\n                \n                <hr style="border: none; border-top: 1px solid #eee; margin: 25px 0;">\n                \n                <p style="font-size: 13px; color: #777; margin-bottom: 5px;">Si no solicitaste restablecer tu contraseña, por favor ignora este mensaje.</p>\n                \n                <div style="text-align: center; margin-top: 30px;">\n                    <p style="font-family: 'Oswald', sans-serif; font-size: 16px; font-weight: 600; color: #333; margin-bottom: 5px;">RG4LBARBER</p>\n                    <p style="font-size: 12px; color: #999;">Estilo y precisión en cada corte</p>\n                </div>\n            </div>\n        </body>\n        </html>\n        """\n        \n        # Enviar el correo\n        mail.send(msg)\n        print(f"Correo reenviado a {email} con código {codigo}")\n        \n        return jsonify({'message': 'Código reenviado correctamente'}), 200\n    \n    except Exception as e:\n        print(f"Error al enviar correo: {str(e)}")\n        return jsonify({'error': 'No se pudo enviar el correo. Por favor, inténtalo más tarde.'}), 500\n\n# API para completar el cambio de contraseña\n@bp.route('/api/reset-password/completar', methods=['POST'])\ndef completar_reset():\n    data = request.get_json()\n    email = data.get('email')\n    token = data.get('token')\n    password = data.get('password')\n    \n    usuario = Usuario.query.filter_by(correo=email).first()\n    if not usuario or not usuario.reset_token or usuario.reset_token != token:\n        return jsonify({'error': 'Token inválido'}), 400\n    \n    # Verificar si el token ha expirado\n    if datetime.now() > usuario.reset_token_expiracion:\n        return jsonify({'error': 'Sesión expirada. Inicia el proceso nuevamente.'}), 400\n    \n    # Cambiar contraseña\n    usuario.set_password(password)\n    \n    # Limpiar campos de restablecimiento\n    usuario.reset_codigo = None\n    usuario.reset_expiracion = None\n    usuario.reset_token = None\n    usuario.reset_token_expiracion = None\n    \n    db.session.commit()\n    \n    return jsonify({'message': 'Contraseña cambiada con éxito'}), 200

@bp.route('/finanzas')
def finanzas():
    if 'usuario_id' not in session:
        return redirect(url_for('auth.login'))
    rol = session.get('rol')
    if rol == 'admin':
        return render_template('usuario/admin/admin_dashboard.html')
    return render_template('usuario/cliente/cliente_dashboard.html')

